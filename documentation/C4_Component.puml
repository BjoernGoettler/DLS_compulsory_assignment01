@startuml C4_Component
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!include <C4/C4_Container.puml>
title Component Diagram
Person(user, "Jokester", "Funny guy")
Container_Boundary(jokeContainer, "Joke component") {
    Component(jokeservice, "Joke Service", $techn=dotnet/API, $descr="Serves the Jokester")
    ComponentDb(jokedb, "Joke Database", $techn=mysql, $descr="Persists jokes")
    Component(loggingClient, "Logging Client", $techn="C#/Class Library", $descr="Client that orchestrates communication with the logging gateway")
}
Container_Boundary(loggingContainer, "Logging component") {
    Component(loggingGateway, "Logging Gateway", $techn=dotnet/API, $descr="Provides a unified gateway for a logging client")
    Component(loggingService, "Logging Service", $techn=dotnet/API, $descr="Logging API")
    Component(tracingService, "Tracing Service", $techn=dotnet/API, $descr="Tracing API")
    Component(metricsService, "Metrics Service", $techn=dotnet/API, $descr="Metrics API")
    ComponentDb(loggingdb, "Logging Database", $techn=mysql, $descr="Database for logging")
    ComponentDb(tracingdb, "Tracing Database", $techn=mysql, $descr="Database for tracing")
    ComponentDb(metricsdb, "Metrics Database", $techn=influxDb, $descr="Database for metrics")
}
Rel_D(user, jokeservice, "interacts", "HTTP")
Rel_D(jokeservice, loggingClient, "tells", "Sublime code")
Rel_R(jokeservice, jokedb, "Queries","dotnet/EntityFramework")
Rel_D(loggingClient, loggingGateway, "logs", "ASYNC/HTTP")
Rel(loggingGateway, loggingService, "Sends log messages", "ASYNC/HTTP")
Rel(loggingGateway, tracingService, "Send trace messages", "ASYNC/HTTP")
Rel(loggingGateway, metricsService, "Sends metrics", "ASYNC/HTTP")
Rel(loggingService, loggingdb, "Persist log messages", "EntityFramework")
Rel(tracingService, tracingdb, "Persists traces", "EntityFramework")
Rel(metricsService, metricsdb, "Persists metrics", "influxDbClient")

SHOW_LEGEND()
@enduml
